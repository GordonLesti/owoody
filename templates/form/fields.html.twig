{% block hold_setup_widget %}
    {% set random_id = random() %}
    <script>
        "use strict";

        function initHoldSetup{{ random_id }}() {
            const emptyHoldSetup = Array({{ rows }});
            const emptyRow = Array({{ columns }});
            emptyRow.fill(0, 0);
            emptyHoldSetup.fill(emptyRow, 0);

            return {
                bulbIsOn: Alpine.$persist(false),
                holdSetup: [],
                holdSetupValue: {% if value is defined and value is not empty and value != '[]' %}"{{ value }}"{% else %}JSON.stringify(emptyHoldSetup){% endif %},
                init() {
                    this.holdSetup = JSON.parse(this.holdSetupValue);
                    this.triggerBulb();
                },
                clickHold(rowIndex, columnIndex) {
                    this.holdSetup[rowIndex][columnIndex] = (this.holdSetup[rowIndex][columnIndex] + 1) % 5;
                    this.holdSetupValue = JSON.stringify(this.holdSetup);
                },
                observeBulb($event) {
                    this.bulbIsOn = $event.detail.isOn;
                    this.triggerBulb();
                },
                async triggerBulb() {
                    if (this.bulbIsOn) {
                        try {
                            const response = await  fetch('{{ path('bulb') }}',{
                                method: "POST",
                                body: this.holdSetupValue
                            });
                        } catch (error) {
                        }
                    }
                }
            };
        }
    </script>
    <div x-data="initHoldSetup{{ random_id }}()" @bulb.window="observeBulb" class="overflow-hidden rounded-lg mt-2">
        {% for rowIndex in 0..rows-1 %}
            <div class="flex flex-row">
                {% for columnIndex in 0..columns-1 %}
                    <div class="text-gray-400" style="flex-basis: calc(100% / {{ columns }})" @click="clickHold({{ rowIndex }}, {{ columnIndex }})" :class="{
                        'text-gray-400': holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 0,
                        'text-blue-400': holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 1,
                        'text-red-400': holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 2,
                        'text-yellow-400': holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 3,
                        'text-green-400': holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 4,
                    }">
                        <svg fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" x-show="holdSetup[{{ rowIndex }}][{{ columnIndex }}] == 0">
                            <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                        </svg>
                        <svg viewBox="0 0 24 24" fill="currentColor" x-show="holdSetup[{{ rowIndex }}][{{ columnIndex }}] > 0" x-cloak>
                            <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                        </svg>
                    </div>
                {% endfor %}
            </div>
        {% endfor %}
        <input type="hidden" {{ block('widget_attributes') }} :value="holdSetupValue">
    </div>
{% endblock %}