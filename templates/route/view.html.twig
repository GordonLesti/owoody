{% extends 'base.html.twig' %}

{% block navigation_button %}
<button type="button" @click="location.href='{{ path('route') }}'" class="relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primery-500">
    <span class="absolute -inset-0.5"></span>
    <span class="sr-only">Back to Routes</span>
    <svg fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
    </svg>
</button>
{% endblock %}

{% block navigation_title %}{{ route_entity.name }}{% endblock %}

{% block navigation_buttons %}
{% include 'button/bulb.html.twig' %}
{% include 'button/mirror.html.twig' %}
{% include 'button/edit.html.twig' %}
{% endblock %}

{% block main %}
{% set colorClasses = ['text-gray-400', 'text-blue-400', 'text-red-400', 'text-yellow-400', 'text-green-400'] %}
<script>
    function initRouteView()
    {
        return {
            bulbIsOn: Alpine.$persist(false),
            init() {
                this.triggerBulb();
            },
            observeBulb($event) {
                this.bulbIsOn = $event.detail.isOn;
                this.triggerBulb();
            },
            async triggerBulb() {
                if (this.bulbIsOn) {
                    try {
                        const response = await fetch('{{ path('bulb') }}', {
                            method: "POST",
                            body: "{{ route_entity.holdSetup|json_encode }}"
                        });
                    } catch (error) {
                    }
                }
            }
        }
    }    
</script>
<div x-data="initRouteView()" @bulb.window="observeBulb" class="mx-auto max-w-2xl pb-5 divide-y divide-gray-100">
    <div class="overflow-hidden rounded-lg py-5">
        {% for rowIndex in 0..route_entity.holdSetup|length-1 %}
            <div class="flex flex-row">
                {% for columnIndex in 0..route_entity.holdSetup[rowIndex]|length-1 %}
                    {% set holdType = route_entity.holdSetup[rowIndex][columnIndex] %}
                    <div style="flex-basis: calc(100% / {{ route_entity.holdSetup[rowIndex]|length }})" class="{{ colorClasses[holdType] }}">
                        {% if holdType == 0 %}
                            <svg fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor">
                                <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                            </svg>
                        {% else %}
                            <svg viewBox="0 0 24 24" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                            </svg>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <div class="py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
        <dt class="text-sm/6 font-medium text-gray-900">Grade</dt>
        <dd class="mt-1 text-sm/6 text-gray-700 sm:col-span-2 sm:mt-0">{{ route_entity.grade.value }}</dd>
    </div>
        <div class="py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
        <dt class="text-sm/6 font-medium text-gray-900">Created At</dt>
        <dd class="mt-1 text-sm/6 text-gray-700 sm:col-span-2 sm:mt-0">{{ route_entity.createdAt|date }}</dd>
    </div>
    {% if route_entity.note %}
        <div class="py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt class="text-sm/6 font-medium text-gray-900">Note</dt>
            <dd class="mt-1 text-sm/6 text-gray-700 sm:col-span-2 sm:mt-0">{{ route_entity.note }}</dd>
        </div>
    {% endif %}
</div>
{% endblock %}